PLAN -> Code -> Analyze -> Build -> UT -> Package -> Archive -> Deploy -> AT -> CC
															-------
															Ansible
What is Ansible?
-------------------------------------
		Config mgmt tool.
		- SERVER(S) config mgmt
		
		Using Python
		From Redhat 
		Release
			Ansible			- CMD - FREE - Opensource
			Ansible AWX		- GUI - FREE - Latest version of Tower - No support 
			Ansible Tower	- GUI - Paid - 
		Version 
		2.9

what is there in SERVER so we manage their config?
-------------------------------
		files
		dir
		package
		services
		anything in the server
===================================================
Why Ansible?
		Configuring a server(s)
		Easy to Read - write - learn - test - debug - share
		IDEOMPOTENT
		Manage Large server deployment
------------------------------------------
Other - > Chef - puppet - salt - cfengine

==================================================
Ansible Architecture
------------------------------------------
HUMAN ---> ACS --> ARS(S)

ACS - Control server
ARS - Remote Server

---ACS-------------------------ARS------------------
LINUX						 ANY
PYTHON						 LINUX - python
							 WIN - PS3 + DOTNET 4.5
		---------SSH --------- Linux
		--------- WINRM ------> Windows
----------------------------------------------------
Ansible						 NA
	Executables
	Modules			-> Its CODE resides in ACS But run ARS. copy, service
	Plugins			-> Its CODE resides in ACS But Add functionality to Ansible
	Configfile		-> /etc/ansible/config.cfg - Change a default behaviour of Executables

Playook

Inventory
		LIST OF IP ADDRESSS of ARS
			CMD	
			FILE
			SCIPRT
		GROUP
			list of ip for specific function
			all 
			nogroup
		GROUP of Group
			
		Vars


----------------------------------------------------
Ansible Adhoc Command
=================================
Project - setup a webserver
------------------------------
Psucode
	1. install a httpd			- yum	[name=httpd state=latest]
	2. copy index.html /var/www/html - copy	[ src=index.html dest=/var/www/html ]
	3. start a services					- service [name=httpd state=started]
===================================================

ansible localhost -m yum -a"name=httpd state=latest"
ansible localhost -m copy -a"src=index.html dest=/var/www/html"
ansible localhost -m service -a"name=httpd state=started"


ansible-playbook
ansible-galaxy

positional arguments:
  pattern               host pattern

optional arguments:
  --ask-vault-password, --ask-vault-pass
                        ask for vault password
  --list-hosts          outputs a list of matching hosts; does not execute
                        anything else
  --playbook-dir BASEDIR
                        Since this tool does not use playbooks, use this as a
                        substitute playbook directory.This sets the relative
                        path for many features including roles/ group_vars/
                        etc.
  --syntax-check        perform a syntax check on the playbook, but do not
                        execute it
  --task-timeout TASK_TIMEOUT
                        set task timeout limit in seconds, must be positive
                        integer.
  --vault-id VAULT_IDS  the vault identity to use
  --vault-password-file VAULT_PASSWORD_FILES, --vault-pass-file VAULT_PASSWORD_FILES
                        vault password file
  --version             show program's version number, config file location,
                        configured module search path, module location,
                        executable location and exit
  -B SECONDS, --background SECONDS
                        run asynchronously, failing after X seconds
                        (default=N/A)
  -C, --check           don't make any changes; instead, try to predict some
                        of the changes that may occur
  -D, --diff            when changing (small) files and templates, show the
                        differences in those files; works great with --check
  -M MODULE_PATH, --module-path MODULE_PATH
                        prepend colon-separated path(s) to module library (def
                        ault=~/.ansible/plugins/modules:/usr/share/ansible/plu
                        gins/modules)
  -P POLL_INTERVAL, --poll POLL_INTERVAL
                        set the poll interval if using -B (default=15)
  -a MODULE_ARGS, --args MODULE_ARGS
                        The action's options in space separated k=v format: -a
                        'opt1=val1 opt2=val2'
  -e EXTRA_VARS, --extra-vars EXTRA_VARS
                        set additional variables as key=value or YAML/JSON, if
                        filename prepend with @
  -f FORKS, --forks FORKS
                        specify number of parallel processes to use
                        (default=5)
  -h, --help            show this help message and exit
  -i INVENTORY, --inventory INVENTORY, --inventory-file INVENTORY
                        specify inventory host path or comma separated host
                        list. --inventory-file is deprecated
  -l SUBSET, --limit SUBSET
                        further limit selected hosts to an additional pattern
  -m MODULE_NAME, --module-name MODULE_NAME
                        Name of the action to execute (default=command)
  -o, --one-line        condense output
  -t TREE, --tree TREE  log output to this directory
  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable
                        connection debugging)

Privilege Escalation Options:
  control how and which user you become as on target hosts

  --become-method BECOME_METHOD
                        privilege escalation method to use (default=sudo), use
                        `ansible-doc -t become -l` to list valid choices.
  --become-user BECOME_USER
                        run operations as this user (default=root)
  -K, --ask-become-pass
                        ask for privilege escalation password
  -b, --become          run operations with become (does not imply password
                        prompting)

Connection Options:
  control as whom and how to connect to hosts

  --private-key PRIVATE_KEY_FILE, --key-file PRIVATE_KEY_FILE
                        use this file to authenticate the connection
  --scp-extra-args SCP_EXTRA_ARGS
                        specify extra arguments to pass to scp only (e.g. -l)
  --sftp-extra-args SFTP_EXTRA_ARGS
                        specify extra arguments to pass to sftp only (e.g. -f,
                        -l)
  --ssh-common-args SSH_COMMON_ARGS
                        specify common arguments to pass to sftp/scp/ssh (e.g.
                        ProxyCommand)
  --ssh-extra-args SSH_EXTRA_ARGS
                        specify extra arguments to pass to ssh only (e.g. -R)
  -T TIMEOUT, --timeout TIMEOUT
                        override the connection timeout in seconds
                        (default=10)
  -c CONNECTION, --connection CONNECTION
                        connection type to use (default=smart)
  -k, --ask-pass        ask for connection password
  -u REMOTE_USER, --user REMOTE_USER
                        connect as this user (default=None)

Some actions do not make sense in Ad-Hoc (include, meta, etc)



ansible all -i 192.168.1.16,192.168.1.17, -m yum -a"name=httpd state=latest" -u root -k
ansible all -i 192.168.1.16, -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i 192.168.1.16, -m service -a"name=httpd state=started" -u root -k
ansible all -i 192.168.1.16, -m service -a"name=firewalld state=stopped" -u root -k

ansible all -i 192.168.1.16,192.168.1.17, -m yum -a"name=httpd state=latest" -u root -k
ansible all -i 192.168.1.16,192.168.1.17, -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i 192.168.1.16,192.168.1.17, -m service -a"name=httpd state=started" -u root -k
ansible all -i 192.168.1.16,192.168.1.17, -m service -a"name=firewalld state=stopped" -u root -k


ansible all -i 192.168.1.16,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17,192.168.1.17, -m yum -a"name=httpd state=latest" -u root -k


inventory
--------------------------------
192.168.1.16
192.168.1.17


ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k


ansible qa -i inventory -m yum -a"name=httpd state=latest" -u root -k

====================================================



ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k
ansible all -i inventory -m yum -a"name=httpd state=latest" -u root -k
ansible all -i inventory -m copy -a"src=index.html dest=/var/www/html" -u root -k
ansible all -i inventory -m service -a"name=httpd state=started" -u root -k
ansible all -i inventory -m service -a"name=firewalld state=stopped" -u root -k

----------------------------------PLAYBOOK---------------------


-------------------------
		YAML FILE
		Contains play

		What is Play?
		------------------------
		Hosts: group
		Tasks:
				Module 1 and its parameter
				Module 2 and its parameter
				Module 3 and its parameter
				Module 4 and its parameter

---
- name: Update web servers
  hosts: web

  tasks:
  - name: Install Apache in centos7
    ansible.builtin.yum:
      name: "httpd"
      state: latest
  - name: Copy index.html
    ansible.builtin.copy:
      src: index.html
      dest: /var/www/html/index.html
  - name: Starting a Apache Server
    ansible.builtin.service:
      name: "httpd"
      state: started


ansible-playbook -i inventory playbook-1.yaml -u root -k
========================================================





---
- name: Update web servers
  hosts: web

  tasks:
  - name: Install Apache in centos7
    ansible.builtin.yum:
      name: "httpd"
      state: latest
  - name: Copy index.html
    ansible.builtin.copy:
      src: index.html
      dest: /var/www/html/index.html


---
- name: Update web servers
  hosts: web

  tasks:
  - name: Starting a Apache Server
    ansible.builtin.service:
      name: "httpd"
      state: started


ansible-playbook -i inventory master.yaml -u root -k



---
- name: Update web servers
  hosts: web

  tasks:
  - name: Starting a Apache Server
    ansible.builtin.service:
      name: "httpd"
      state: started
  - include: tasks.yaml


ansible-playbook -i inventory tasksfile.yaml -u root -k


What are the things you may have in Playbook?
-------------------------------------------------
Vars
https://www.devopsschool.com/blog/example-code-of-ansible-variable-with-playbook/

ansible-playbook -i inventory vars-play.yaml -u root -k



Templates

Handlers
https://www.devopsschool.com/blog/ansible-template-and-handlers-explained-with-example/


---
- name: Update web servers
  hosts: web
  vars:
    myname: "Rajesh Kumar"

  tasks:
  - name: Install Apache in centos7
    ansible.builtin.yum:
      name: httpd
      state: latest
  - name: Template index.html
    template:
      src: index.html.j2
      dest: /var/www/html/index.html
  - name: Starting a Apache Server
    ansible.builtin.service:
      name: httpd
      state: started
  - name: Print return information from the previous task
    ansible.builtin.debug:
      var: myname

ansible-playbook -i inventory temp.yaml -u root -k


ansible-playbook -i inventory hand.yaml -u root -k

========================================================================
What is role?
-------------------------------
--- Directory structure
			for giving best practices of how to org 
					- tasks
					- vars
					- files
					- template
					- handlers




---
- name: Update web servers
  hosts: web

  roles:
  - web



ansible-playbook -i inventory site.yaml -u root -k




What is IDEOMPOTENT?


		
